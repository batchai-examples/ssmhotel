{
    "has_issue": false,
    "overall_severity": "",
    "issues": [],
    "fixed_code": "package com.bdqn.controller.admin;\n\nimport com.alibaba.fastjson.JSON;\nimport com.bdqn.entity.Employee;\nimport com.bdqn.service.EmployeeService;\nimport com.bdqn.utils.DataGridViewResult;\nimport com.bdqn.utils.SystemConstant;\nimport com.bdqn.vo.EmployeeVo;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpSession;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/admin/employee\")\npublic class EmployeeController {\n\n\n    @Resource\n    private EmployeeService employeeService;\n\n\n    /**\n     * 员工登录\n     * @param username\n     * @param password\n     * @param session\n     * @return\n     */\n    @RequestMapping(\"/login\")\n    public String login(String username, String password, HttpSession session){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用员工登录的方法\n        Employee employee = employeeService.login(username, password);\n        //判断对象是否为空，不为空表示登录成功\n        if(employee!=null){\n            //保存当前登录用户\n            session.setAttribute(SystemConstant.LOGINUSER,employee);\n            map.put(SystemConstant.SUCCESS,true);//成功\n        }else{\n            map.put(SystemConstant.SUCCESS,false);//失败\n            map.put(SystemConstant.MESSAGE,\"账号密码错误，登录失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 员工列表\n     * @param employeeVo\n     * @return\n     */\n    @RequestMapping(\"/list\")\n    public DataGridViewResult list(EmployeeVo employeeVo){\n        //设置分页信息\n        PageHelper.startPage(employeeVo.getPage(),employeeVo.getLimit());\n        //调用查询的方法\n        List\u003cEmployee\u003e employeeList = employeeService.findEmployeeList(employeeVo);\n        //创建分页对象\n        PageInfo\u003cEmployee\u003e pageInfo = new PageInfo\u003cEmployee\u003e(employeeList);\n        //返回数据\n        return new DataGridViewResult(pageInfo.getTotal(),pageInfo.getList());\n    }\n\n    /**\n     * 添加员工\n     * @param employee\n     * @param session\n     * @return\n     */\n    @RequestMapping(\"/addEmployee\")\n    public String addEmployee(Employee employee,HttpSession session){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //获取当前登录用户\n        Employee loginUser = (Employee) session.getAttribute(SystemConstant.LOGINUSER);\n        //设置创建人\n        employee.setCreatedBy(loginUser.getId());\n        //调用新增员工的方法\n        if(employeeService.addEmployee(employee)\u003e0) {\n            map.put(SystemConstant.SUCCESS, true);\n            map.put(SystemConstant.MESSAGE, \"添加成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS, false);\n            map.put(SystemConstant.MESSAGE, \"添加失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 修改员工\n     * @param employee\n     * @param session\n     * @return\n     */\n    @RequestMapping(\"/updateEmployee\")\n    public String updateEmployee(Employee employee,HttpSession session){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //获取当前登录用户\n        Employee loginUser = (Employee) session.getAttribute(SystemConstant.LOGINUSER);\n        //设置修改人\n        employee.setModifyBy(loginUser.getId());\n        //调用新增员工的方法\n        if(employeeService.updateEmployee(employee)\u003e0) {\n            map.put(SystemConstant.SUCCESS, true);\n            map.put(SystemConstant.MESSAGE, \"修改成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS, false);\n            map.put(SystemConstant.MESSAGE, \"修改失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n\n    /**\n     * 删除员工\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"/deleteById\")\n    public String deleteById(int id){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用删除员工的方法\n        if(employeeService.deleteById(id)\u003e0){\n            map.put(SystemConstant.SUCCESS, true);\n            map.put(SystemConstant.MESSAGE, \"删除成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS, false);\n            map.put(SystemConstant.MESSAGE, \"删除失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n\n    /**\n     * 重置密码\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"/resetPwd\")\n    public String resetPwd(int id){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用重置密码的方法\n        if(employeeService.resetPwd(id)\u003e0){\n            map.put(SystemConstant.SUCCESS, true);\n            map.put(SystemConstant.MESSAGE, \"密码重置成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS, false);\n            map.put(SystemConstant.MESSAGE, \"密码重置失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 分配角色\n     * @param roleIds\n     * @param empId\n     * @return\n     */\n    @RequestMapping(\"/saveEmployeeRole\")\n    public String saveEmployeeRole(String roleIds,Integer empId){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用保存员工角色关系的方法\n        if(employeeService.saveEmployeeRole(roleIds,empId)){\n            map.put(SystemConstant.MESSAGE,\"角色分配成功\");\n        }else{\n            map.put(SystemConstant.MESSAGE,\"角色分配失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n}\n",
    "original_code": "package com.bdqn.controller.admin;\n\nimport com.alibaba.fastjson.JSON;\nimport com.bdqn.entity.Employee;\nimport com.bdqn.service.EmployeeService;\nimport com.bdqn.utils.DataGridViewResult;\nimport com.bdqn.utils.SystemConstant;\nimport com.bdqn.vo.EmployeeVo;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpSession;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/admin/employee\")\npublic class EmployeeController {\n\n\n    @Resource\n    private EmployeeService employeeService;\n\n\n    /**\n     * 员工登录\n     * @param username\n     * @param password\n     * @param session\n     * @return\n     */\n    @RequestMapping(\"/login\")\n    public String login(String username, String password, HttpSession session){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用员工登录的方法\n        Employee employee = employeeService.login(username, password);\n        //判断对象是否为空，不为空表示登录成功\n        if(employee!=null){\n            //保存当前登录用户\n            session.setAttribute(SystemConstant.LOGINUSER,employee);\n            map.put(SystemConstant.SUCCESS,true);//成功\n        }else{\n            map.put(SystemConstant.SUCCESS,false);//失败\n            map.put(SystemConstant.MESSAGE,\"账号密码错误，登录失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 员工列表\n     * @param employeeVo\n     * @return\n     */\n    @RequestMapping(\"/list\")\n    public DataGridViewResult list(EmployeeVo employeeVo){\n        //设置分页信息\n        PageHelper.startPage(employeeVo.getPage(),employeeVo.getLimit());\n        //调用查询的方法\n        List\u003cEmployee\u003e employeeList = employeeService.findEmployeeList(employeeVo);\n        //创建分页对象\n        PageInfo\u003cEmployee\u003e pageInfo = new PageInfo\u003cEmployee\u003e(employeeList);\n        //返回数据\n        return new DataGridViewResult(pageInfo.getTotal(),pageInfo.getList());\n    }\n\n    /**\n     * 添加员工\n     * @param employee\n     * @param session\n     * @return\n     */\n    @RequestMapping(\"/addEmployee\")\n    public String addEmployee(Employee employee,HttpSession session){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //获取当前登录用户\n        Employee loginUser = (Employee) session.getAttribute(SystemConstant.LOGINUSER);\n        //设置创建人\n        employee.setCreatedBy(loginUser.getId());\n        //调用新增员工的方法\n        if(employeeService.addEmployee(employee)\u003e0) {\n            map.put(SystemConstant.SUCCESS, true);\n            map.put(SystemConstant.MESSAGE, \"添加成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS, false);\n            map.put(SystemConstant.MESSAGE, \"添加失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 修改员工\n     * @param employee\n     * @param session\n     * @return\n     */\n    @RequestMapping(\"/updateEmployee\")\n    public String updateEmployee(Employee employee,HttpSession session){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //获取当前登录用户\n        Employee loginUser = (Employee) session.getAttribute(SystemConstant.LOGINUSER);\n        //设置修改人\n        employee.setModifyBy(loginUser.getId());\n        //调用新增员工的方法\n        if(employeeService.updateEmployee(employee)\u003e0) {\n            map.put(SystemConstant.SUCCESS, true);\n            map.put(SystemConstant.MESSAGE, \"修改成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS, false);\n            map.put(SystemConstant.MESSAGE, \"修改失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n\n    /**\n     * 删除员工\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"/deleteById\")\n    public String deleteById(int id){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用删除员工的方法\n        if(employeeService.deleteById(id)\u003e0){\n            map.put(SystemConstant.SUCCESS, true);\n            map.put(SystemConstant.MESSAGE, \"删除成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS, false);\n            map.put(SystemConstant.MESSAGE, \"删除失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n\n    /**\n     * 重置密码\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"/resetPwd\")\n    public String resetPwd(int id){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用重置密码的方法\n        if(employeeService.resetPwd(id)\u003e0){\n            map.put(SystemConstant.SUCCESS, true);\n            map.put(SystemConstant.MESSAGE, \"密码重置成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS, false);\n            map.put(SystemConstant.MESSAGE, \"密码重置失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 分配角色\n     * @param roleIds\n     * @param empId\n     * @return\n     */\n    @RequestMapping(\"/saveEmployeeRole\")\n    public String saveEmployeeRole(String roleIds,Integer empId){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用保存员工角色关系的方法\n        if(employeeService.saveEmployeeRole(roleIds,empId)){\n            map.put(SystemConstant.MESSAGE,\"角色分配成功\");\n        }else{\n            map.put(SystemConstant.MESSAGE,\"角色分配失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n}\n",
    "path": "src/main/java/com/bdqn/controller/admin/EmployeeController.java",
    "model_usage_metrics": {
        "Duration": 1154505211,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    }
}