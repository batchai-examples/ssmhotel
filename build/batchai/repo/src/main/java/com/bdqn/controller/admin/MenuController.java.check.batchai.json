{
    "has_issue": false,
    "overall_severity": "",
    "issues": [],
    "fixed_code": "package com.bdqn.controller.admin;\n\n\nimport com.alibaba.fastjson.JSON;\nimport com.bdqn.entity.Employee;\nimport com.bdqn.entity.Menu;\nimport com.bdqn.service.MenuService;\nimport com.bdqn.utils.*;\nimport com.bdqn.vo.MenuVo;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpSession;\nimport java.util.*;\n\n@RestController\n@RequestMapping(\"/admin/menu\")\npublic class MenuController {\n\n    //注入MenuService\n    @Resource\n    private MenuService menuService;\n\n\n    /**\n     * 加载首页左侧菜单导航\n     * @param session\n     * @return\n     */\n    @RequestMapping(\"/loadMenuList\")\n    public String loadMenuList(HttpSession session){\n        //创建Map集合，保存MenuInfo菜单信息\n        Map\u003cString,Object\u003e map = new LinkedHashMap\u003cString,Object\u003e();\n        //创建Map集合，保存homeInfo信息\n        Map\u003cString,Object\u003e homeInfo = new LinkedHashMap\u003cString,Object\u003e();\n        //创建Map集合，保存logoInfo信息\n        Map\u003cString,Object\u003e logoInfo = new LinkedHashMap\u003cString,Object\u003e();\n        //调用查询所有菜单列表的方法\n        //List\u003cMenu\u003e menuList = menuService.findMenuList();//该方法无论是哪个角色的用户登录，都能够查询所有的功能模块\n        //获取当前登录员工\n        Employee employee = (Employee) session.getAttribute(SystemConstant.LOGINUSER);\n        //根据当前用户的角色动态显示菜单列表\n        List\u003cMenu\u003e menuList = menuService.findMenuListByEmployeeId(employee.getId());\n        //创建集合，保存菜单关系\n        List\u003cMenuNode\u003e menuNodeList = new ArrayList\u003cMenuNode\u003e();\n        //循环遍历菜单列表,目的是创建菜单之间层级关系\n        for (Menu m : menuList) {\n            //创建菜单节点对象\n            MenuNode menuNode = new MenuNode();\n            menuNode.setHref(m.getHref());//链接地址\n            menuNode.setIcon(m.getIcon());//菜单图标\n            menuNode.setId(m.getId());//菜单编号\n            menuNode.setPid(m.getPid());//父级菜单编号\n            menuNode.setSpread(m.getSpread());//是否展开\n            menuNode.setTarget(m.getTarget());//打开方式\n            menuNode.setTitle(m.getTitle());//菜单名称\n            //将对象添加到集合\n            menuNodeList.add(menuNode);\n        }\n        //保存HomeInfo信息\n        homeInfo.put(\"title\",\"首页\");\n        homeInfo.put(\"href\",\"/admin/desktop\");\n        //保存logoInfo信息\n        logoInfo.put(\"title\",\"酒店管理系统\");//logo标题\n        logoInfo.put(\"image\",\"/statics/layui/images/logo.png\");//logo图片\n        logoInfo.put(\"href\",\"/admin/home.html\");//首页地址\n        //将菜单信息添加到MenuInfo集合中\n        map.put(\"menuInfo\", TreeUtil.toTree(menuNodeList,0));\n        map.put(\"homeInfo\",homeInfo);\n        map.put(\"logoInfo\",logoInfo);\n\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 加载菜单管理页面的左侧导航树\n     * @return\n     */\n    @RequestMapping(\"/loadMenuTree\")\n    public DataGridViewResult loadMenuTree(){\n        //调用查询所有菜单列表的方法\n        List\u003cMenu\u003e menuList = menuService.findMenuList();\n        //创建集合保存节点信息\n        List\u003cTreeNode\u003e treeNodes = new ArrayList\u003cTreeNode\u003e();\n        //循环遍历菜单列表集合\n        for (Menu menu : menuList) {\n            //判断当前菜单是否展开\n            Boolean spread = (menu.getSpread()==null || menu.getSpread()==1) ? true : false;\n            //将菜单信息保存到treeNodes集合中\n            treeNodes.add(new TreeNode(menu.getId(),menu.getPid(),menu.getTitle(),spread));\n        }\n        //返回数据\n        return new DataGridViewResult(treeNodes);\n    }\n\n    /**\n     * 分页查询菜单列表\n     * @param menuVo\n     * @return\n     */\n    @RequestMapping(\"/list\")\n    public DataGridViewResult list(MenuVo menuVo){\n        //设置分页信息\n        PageHelper.startPage(menuVo.getPage(),menuVo.getLimit());\n        //调用查询菜单列表的方法\n        List\u003cMenu\u003e menuList = menuService.findMenuListByPage(menuVo);\n        //创建分页对象\n        PageInfo\u003cMenu\u003e pageInfo = new PageInfo\u003cMenu\u003e(menuList);\n        //返回数据\n        return new DataGridViewResult(pageInfo.getTotal(),pageInfo.getList());\n    }\n\n    /**\n     * 添加菜单\n     * @param menu\n     * @return\n     */\n    @RequestMapping(\"/addMenu\")\n    public String add(Menu menu){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用新增菜单的方法\n        if(menuService.addMenu(menu)\u003e0){\n            map.put(SystemConstant.SUCCESS,true);\n            map.put(SystemConstant.MESSAGE,\"添加成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS,false);\n            map.put(SystemConstant.MESSAGE,\"添加失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 修改菜单\n     * @param menu\n     * @return\n     */\n    @RequestMapping(\"/updateMenu\")\n    public String updateMenu(Menu menu){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用修改菜单的方法\n        if(menuService.updateMenu(menu)\u003e0){\n            map.put(SystemConstant.SUCCESS,true);\n            map.put(SystemConstant.MESSAGE,\"修改成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS,false);\n            map.put(SystemConstant.MESSAGE,\"修改失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 判断该菜单是否有子菜单\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"/checkMenuHasChild\")\n    public String checkMenuHasChild(Integer id){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用查询菜单的方法\n        if(menuService.getMenuCountByMenuId(id)\u003e0){\n            map.put(SystemConstant.EXIST,true);\n            map.put(SystemConstant.MESSAGE,\"该菜单下有子菜单，无法删除\");\n        }else{\n            map.put(SystemConstant.EXIST,false);\n        }\n        return JSON.toJSONString(map);\n    }\n\n\n    /**\n     * 删除菜单\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"/deleteById\")\n    public String deleteById(Integer id){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用删除菜单的方法\n        if(menuService.deleteById(id)\u003e0){\n            map.put(SystemConstant.SUCCESS,true);\n            map.put(SystemConstant.MESSAGE,\"删除成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS,false);\n            map.put(SystemConstant.MESSAGE,\"删除失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n}\n",
    "original_code": "package com.bdqn.controller.admin;\n\n\nimport com.alibaba.fastjson.JSON;\nimport com.bdqn.entity.Employee;\nimport com.bdqn.entity.Menu;\nimport com.bdqn.service.MenuService;\nimport com.bdqn.utils.*;\nimport com.bdqn.vo.MenuVo;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpSession;\nimport java.util.*;\n\n@RestController\n@RequestMapping(\"/admin/menu\")\npublic class MenuController {\n\n    //注入MenuService\n    @Resource\n    private MenuService menuService;\n\n\n    /**\n     * 加载首页左侧菜单导航\n     * @param session\n     * @return\n     */\n    @RequestMapping(\"/loadMenuList\")\n    public String loadMenuList(HttpSession session){\n        //创建Map集合，保存MenuInfo菜单信息\n        Map\u003cString,Object\u003e map = new LinkedHashMap\u003cString,Object\u003e();\n        //创建Map集合，保存homeInfo信息\n        Map\u003cString,Object\u003e homeInfo = new LinkedHashMap\u003cString,Object\u003e();\n        //创建Map集合，保存logoInfo信息\n        Map\u003cString,Object\u003e logoInfo = new LinkedHashMap\u003cString,Object\u003e();\n        //调用查询所有菜单列表的方法\n        //List\u003cMenu\u003e menuList = menuService.findMenuList();//该方法无论是哪个角色的用户登录，都能够查询所有的功能模块\n        //获取当前登录员工\n        Employee employee = (Employee) session.getAttribute(SystemConstant.LOGINUSER);\n        //根据当前用户的角色动态显示菜单列表\n        List\u003cMenu\u003e menuList = menuService.findMenuListByEmployeeId(employee.getId());\n        //创建集合，保存菜单关系\n        List\u003cMenuNode\u003e menuNodeList = new ArrayList\u003cMenuNode\u003e();\n        //循环遍历菜单列表,目的是创建菜单之间层级关系\n        for (Menu m : menuList) {\n            //创建菜单节点对象\n            MenuNode menuNode = new MenuNode();\n            menuNode.setHref(m.getHref());//链接地址\n            menuNode.setIcon(m.getIcon());//菜单图标\n            menuNode.setId(m.getId());//菜单编号\n            menuNode.setPid(m.getPid());//父级菜单编号\n            menuNode.setSpread(m.getSpread());//是否展开\n            menuNode.setTarget(m.getTarget());//打开方式\n            menuNode.setTitle(m.getTitle());//菜单名称\n            //将对象添加到集合\n            menuNodeList.add(menuNode);\n        }\n        //保存HomeInfo信息\n        homeInfo.put(\"title\",\"首页\");\n        homeInfo.put(\"href\",\"/admin/desktop\");\n        //保存logoInfo信息\n        logoInfo.put(\"title\",\"酒店管理系统\");//logo标题\n        logoInfo.put(\"image\",\"/statics/layui/images/logo.png\");//logo图片\n        logoInfo.put(\"href\",\"/admin/home.html\");//首页地址\n        //将菜单信息添加到MenuInfo集合中\n        map.put(\"menuInfo\", TreeUtil.toTree(menuNodeList,0));\n        map.put(\"homeInfo\",homeInfo);\n        map.put(\"logoInfo\",logoInfo);\n\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 加载菜单管理页面的左侧导航树\n     * @return\n     */\n    @RequestMapping(\"/loadMenuTree\")\n    public DataGridViewResult loadMenuTree(){\n        //调用查询所有菜单列表的方法\n        List\u003cMenu\u003e menuList = menuService.findMenuList();\n        //创建集合保存节点信息\n        List\u003cTreeNode\u003e treeNodes = new ArrayList\u003cTreeNode\u003e();\n        //循环遍历菜单列表集合\n        for (Menu menu : menuList) {\n            //判断当前菜单是否展开\n            Boolean spread = (menu.getSpread()==null || menu.getSpread()==1) ? true : false;\n            //将菜单信息保存到treeNodes集合中\n            treeNodes.add(new TreeNode(menu.getId(),menu.getPid(),menu.getTitle(),spread));\n        }\n        //返回数据\n        return new DataGridViewResult(treeNodes);\n    }\n\n    /**\n     * 分页查询菜单列表\n     * @param menuVo\n     * @return\n     */\n    @RequestMapping(\"/list\")\n    public DataGridViewResult list(MenuVo menuVo){\n        //设置分页信息\n        PageHelper.startPage(menuVo.getPage(),menuVo.getLimit());\n        //调用查询菜单列表的方法\n        List\u003cMenu\u003e menuList = menuService.findMenuListByPage(menuVo);\n        //创建分页对象\n        PageInfo\u003cMenu\u003e pageInfo = new PageInfo\u003cMenu\u003e(menuList);\n        //返回数据\n        return new DataGridViewResult(pageInfo.getTotal(),pageInfo.getList());\n    }\n\n    /**\n     * 添加菜单\n     * @param menu\n     * @return\n     */\n    @RequestMapping(\"/addMenu\")\n    public String add(Menu menu){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用新增菜单的方法\n        if(menuService.addMenu(menu)\u003e0){\n            map.put(SystemConstant.SUCCESS,true);\n            map.put(SystemConstant.MESSAGE,\"添加成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS,false);\n            map.put(SystemConstant.MESSAGE,\"添加失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 修改菜单\n     * @param menu\n     * @return\n     */\n    @RequestMapping(\"/updateMenu\")\n    public String updateMenu(Menu menu){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用修改菜单的方法\n        if(menuService.updateMenu(menu)\u003e0){\n            map.put(SystemConstant.SUCCESS,true);\n            map.put(SystemConstant.MESSAGE,\"修改成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS,false);\n            map.put(SystemConstant.MESSAGE,\"修改失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n    /**\n     * 判断该菜单是否有子菜单\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"/checkMenuHasChild\")\n    public String checkMenuHasChild(Integer id){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用查询菜单的方法\n        if(menuService.getMenuCountByMenuId(id)\u003e0){\n            map.put(SystemConstant.EXIST,true);\n            map.put(SystemConstant.MESSAGE,\"该菜单下有子菜单，无法删除\");\n        }else{\n            map.put(SystemConstant.EXIST,false);\n        }\n        return JSON.toJSONString(map);\n    }\n\n\n    /**\n     * 删除菜单\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"/deleteById\")\n    public String deleteById(Integer id){\n        Map\u003cString,Object\u003e map = new HashMap\u003cString,Object\u003e();\n        //调用删除菜单的方法\n        if(menuService.deleteById(id)\u003e0){\n            map.put(SystemConstant.SUCCESS,true);\n            map.put(SystemConstant.MESSAGE,\"删除成功\");\n        }else{\n            map.put(SystemConstant.SUCCESS,false);\n            map.put(SystemConstant.MESSAGE,\"删除失败\");\n        }\n        return JSON.toJSONString(map);\n    }\n\n}\n",
    "path": "src/main/java/com/bdqn/controller/admin/MenuController.java",
    "model_usage_metrics": {
        "Duration": 1185666927,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    }
}