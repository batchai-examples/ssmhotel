{
    "has_issue": false,
    "overall_severity": "",
    "issues": [],
    "fixed_code": "package com.bdqn.service.impl;\n\nimport com.bdqn.dao.EmployeeMapper;\nimport com.bdqn.entity.Employee;\nimport com.bdqn.service.EmployeeService;\nimport com.bdqn.utils.PasswordUtil;\nimport com.bdqn.utils.SystemConstant;\nimport com.bdqn.utils.UUIDUtils;\nimport com.bdqn.vo.EmployeeVo;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\nimport java.util.List;\n\n\n@Service\n@Transactional\npublic class EmployeeServiceImpl implements EmployeeService {\n\n    @Resource\n    private EmployeeMapper employeeMapper;\n\n    /**\n     * 员工登录\n     *\n     * @param loginName\n     * @param loginPwd\n     * @return\n     */\n    public Employee login(String loginName, String loginPwd) {\n        //调用根据账号查询员工信息的方法\n        Employee employee = employeeMapper.findEmployeeByLoginName(loginName);\n        //判断对象是否为空\n        if(employee!=null){\n            //将密码加密处理\n            String newPassword = PasswordUtil.md5(loginPwd,employee.getSalt(), SystemConstant.PASSWORD_COUNT);\n            //比较密码是否一致\n            if(employee.getLoginPwd().equals(newPassword)){\n                return employee;//登录成功\n            }\n        }\n        //登录失败\n        return null;\n    }\n\n    public int getEmployeeCountByDeptId(Integer deptId) {\n        return employeeMapper.getEmployeeCountByDeptId(deptId);\n    }\n\n    public int getEmployeeCountByRoleId(Integer roleId) {\n        return employeeMapper.getEmployeeCountByRoleId(roleId);\n    }\n\n    public List\u003cEmployee\u003e findEmployeeList(EmployeeVo employeeVo) {\n        return employeeMapper.findEmployeeList(employeeVo);\n    }\n\n    public int addEmployee(Employee employee) {\n        employee.setSalt(UUIDUtils.randomUUID());//加密盐值\n        employee.setCreateDate(new Date());//创建时间\n        employee.setLoginPwd(PasswordUtil.md5(SystemConstant.DEFAULT_LOGIN_PWD,employee.getSalt(),SystemConstant.PASSWORD_COUNT));//密码\n        return employeeMapper.addEmployee(employee);\n    }\n\n    public int updateEmployee(Employee employee) {\n        //设置修改时间\n        employee.setModifyDate(new Date());\n        return employeeMapper.updateEmployee(employee);\n    }\n\n    public int deleteById(Integer id) {\n        //删除员工角色关系表的数据\n        employeeMapper.deleteEmployeeAndRole(id);\n        //调用删除员工的方法\n        return employeeMapper.deleteById(id);\n    }\n\n    public int resetPwd(int id) {\n        Employee employee = new Employee();\n        employee.setSalt(UUIDUtils.randomUUID());//必须先设置盐值，再给密码重新加密赋值\n        employee.setLoginPwd(PasswordUtil.md5(SystemConstant.DEFAULT_LOGIN_PWD,employee.getSalt(),SystemConstant.PASSWORD_COUNT));\n        employee.setId(id);//主键，员工编号\n        return employeeMapper.updateEmployee(employee);\n    }\n\n    public boolean saveEmployeeRole(String roleIds, Integer empId) {\n        try {\n            //先删除员工角色关系表的数据\n            employeeMapper.deleteEmployeeAndRole(empId);\n            //再保存员工角色关系\n            String [] idStr = roleIds.split(\",\");\n            for (int i = 0; i \u003c idStr.length; i++) {\n                employeeMapper.addEmployeeRole(idStr[i],empId);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n}\n",
    "original_code": "package com.bdqn.service.impl;\n\nimport com.bdqn.dao.EmployeeMapper;\nimport com.bdqn.entity.Employee;\nimport com.bdqn.service.EmployeeService;\nimport com.bdqn.utils.PasswordUtil;\nimport com.bdqn.utils.SystemConstant;\nimport com.bdqn.utils.UUIDUtils;\nimport com.bdqn.vo.EmployeeVo;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\nimport java.util.List;\n\n\n@Service\n@Transactional\npublic class EmployeeServiceImpl implements EmployeeService {\n\n    @Resource\n    private EmployeeMapper employeeMapper;\n\n    /**\n     * 员工登录\n     *\n     * @param loginName\n     * @param loginPwd\n     * @return\n     */\n    public Employee login(String loginName, String loginPwd) {\n        //调用根据账号查询员工信息的方法\n        Employee employee = employeeMapper.findEmployeeByLoginName(loginName);\n        //判断对象是否为空\n        if(employee!=null){\n            //将密码加密处理\n            String newPassword = PasswordUtil.md5(loginPwd,employee.getSalt(), SystemConstant.PASSWORD_COUNT);\n            //比较密码是否一致\n            if(employee.getLoginPwd().equals(newPassword)){\n                return employee;//登录成功\n            }\n        }\n        //登录失败\n        return null;\n    }\n\n    public int getEmployeeCountByDeptId(Integer deptId) {\n        return employeeMapper.getEmployeeCountByDeptId(deptId);\n    }\n\n    public int getEmployeeCountByRoleId(Integer roleId) {\n        return employeeMapper.getEmployeeCountByRoleId(roleId);\n    }\n\n    public List\u003cEmployee\u003e findEmployeeList(EmployeeVo employeeVo) {\n        return employeeMapper.findEmployeeList(employeeVo);\n    }\n\n    public int addEmployee(Employee employee) {\n        employee.setSalt(UUIDUtils.randomUUID());//加密盐值\n        employee.setCreateDate(new Date());//创建时间\n        employee.setLoginPwd(PasswordUtil.md5(SystemConstant.DEFAULT_LOGIN_PWD,employee.getSalt(),SystemConstant.PASSWORD_COUNT));//密码\n        return employeeMapper.addEmployee(employee);\n    }\n\n    public int updateEmployee(Employee employee) {\n        //设置修改时间\n        employee.setModifyDate(new Date());\n        return employeeMapper.updateEmployee(employee);\n    }\n\n    public int deleteById(Integer id) {\n        //删除员工角色关系表的数据\n        employeeMapper.deleteEmployeeAndRole(id);\n        //调用删除员工的方法\n        return employeeMapper.deleteById(id);\n    }\n\n    public int resetPwd(int id) {\n        Employee employee = new Employee();\n        employee.setSalt(UUIDUtils.randomUUID());//必须先设置盐值，再给密码重新加密赋值\n        employee.setLoginPwd(PasswordUtil.md5(SystemConstant.DEFAULT_LOGIN_PWD,employee.getSalt(),SystemConstant.PASSWORD_COUNT));\n        employee.setId(id);//主键，员工编号\n        return employeeMapper.updateEmployee(employee);\n    }\n\n    public boolean saveEmployeeRole(String roleIds, Integer empId) {\n        try {\n            //先删除员工角色关系表的数据\n            employeeMapper.deleteEmployeeAndRole(empId);\n            //再保存员工角色关系\n            String [] idStr = roleIds.split(\",\");\n            for (int i = 0; i \u003c idStr.length; i++) {\n                employeeMapper.addEmployeeRole(idStr[i],empId);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n}\n",
    "path": "src/main/java/com/bdqn/service/impl/EmployeeServiceImpl.java",
    "model_usage_metrics": {
        "Duration": 1384483057,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    }
}